#summary Explains the process of creating an OpenQwaq image from Squeak 4.1

= Introduction =

The images released initially with OpenQwaq include two different base images. The client image is based on the Croquet Hedgehog SDK release (which is a variant on Squeak 3.8) and the server image is based on Squeak 4.1. This page explains how to transform a Squeak 4.1 image into a suitable OpenQwaq base image.


= Step 1: Unloading everything =

First fetch yourself a Squeak 4.1 image from http://ftp.squeak.org/4.1 to work with. You will need the associated interpreter virtual machine initially, you can _not_ use the OpenQwaq virtual machine quite yet.

Once you have the image, execute the following code:
{{{
"Unload all packages from 4.1"
Smalltalk unloadAllKnownPackages.

"Get Installer back since it is useful for loading stuff:"
((MCHttpRepository
        location: 'http://source.squeak.org/squeak41'
        user: '' password:'')
        versionFromFileNamed: 'Installer-Core-nice.338.mcz') load.
}}}

Save your image before you go on to Step 2.

= Step 2: Migrate to the OpenQwaq packages =

In the second step, we migrate all the packages in Squeak to their corresponding OpenQwaq versions:

{{{
"Prepare class Symbol with AccessProtect class var:"
Symbol addClassVarName: 'AccessProtect'.
Symbol classPool at: 'AccessProtect' put: Mutex new.

"Load the Collections package (proceed through the warning)"
(Installer repository: 'http://www.squeaksource.com/openqwaq') install: 'Collections'.

"Move class Mutex out of the way before loading Kernel"
Mutex rename: #OldMutex.
Mutex category: 'OldMutex'.

"Load the Kernel package (proceed through the warning)"
(Installer repository: 'http://www.squeaksource.com/openqwaq') install: 'Kernel'.

"Update necessary packages."
#(
    SUnit Tests ST80 Balloon Collections CollectionsTests Compiler
    Compression Exceptions Files Graphics GraphicsTests Kernel
    KernelTests Monticello MonticelloConfigurations Morphic
    MorphicExtras MorphicTests Movies Multilingual MultilingualTests
    Network NetworkTests 'PackageInfo-Base' PreferenceBrowser
    SUnitGUI ShoutCore Sound 'Squeak-Version' System
    'ToolBuilder-Kernel' 'ToolBuilder-Morphic' 'ToolBuilder-SUnit'
    Tools ToolsTests TrueType 'XML-Parser'

    "We add these for convenience. The later build process will need them"
    TweakMC 'Qwaq-Build'
) do:[:pkg|
        (Installer repository: 'http://www.squeaksource.com/openqwaq') install: pkg.
].
}}}

At this point you *must* switch to the OpenQwaq virtual machine. So save your image, and start it again with the OpenQwaq VM.

= Step 3: Image cleanup =
The third step simply cleans up some left-over stuff from the prior steps:

{{{
"Fix all reference to OldMutex and remove OldMutex package"
(Smalltalk at: #OldMutex)
    allInstancesDo:[:om| om become: Mutex new].
Smalltalk garbageCollect.
(MCWorkingCopy allManagers
    select:[:wc| wc packageName = 'OldMutex']
    thenDo:[:wc| wc unload]).
Smalltalk removeClassNamed: 'OldMutex'.
SystemOrganization removeEmptyCategories; sortCategories.

"Condense changes for the base image"
Smalltalk condenseChanges.
Smalltalk saveAs: 'OpenQwaq-Base.image'
}}}

At this point you have a suitable OpenQwaq base image that can be used for creating either a client or a server image.
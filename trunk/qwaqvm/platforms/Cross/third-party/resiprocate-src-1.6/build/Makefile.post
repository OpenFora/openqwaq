# $Id: Makefile.post,v 1.3 2004/02/07 20:52:29 jason Exp $

# The license applies to all software incorporated in the "Vovida
# Open Communication Application Library" except for those portions
# incorporating third party software specifically identified as being
# licensed under separate license.
# 
# 
# 
# The Vovida Software License, Version 1.0 
# Copyright (c) 2000 Vovida Networks, Inc.  All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 
# 3. The names "VOCAL", "Vovida Open Communication Application Library",
#    and "Vovida Open Communication Application Library (VOCAL)" must
#    not be used to endorse or promote products derived from this
#    software without prior written permission. For written
#    permission, please contact vocal@vovida.org.
# 
# 4. Products derived from this software may not be called "VOCAL", nor
#    may "VOCAL" appear in their name, without prior written
#    permission of Vovida Networks, Inc.
# 
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT ARE DISCLAIMED.  IN NO EVENT SHALL VOVIDA
# NETWORKS, INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT DAMAGES
# IN EXCESS OF $1,000, NOR FOR ANY INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
# 
# ====================================================================
# 
# This software consists of voluntary contributions made by Vovida
# Networks, Inc. and many individuals on behalf of Vovida Networks,
# Inc.  For more information on Vovida Networks, Inc., please see
# <http://www.vovida.org/>.
# 
# 
# All third party licenses and copyright notices and other required
# legends also need to be complied with as well.
# 

-include $(BUILD)/Makefile.pkg

PURIFY = purify
PURIFY5 = /usr/pure/purify-5.3-solaris2/purify
QUANTIFY = quantify

ifeq ($(OSTYPE),Darwin)
SHARED_EXTENSION := dylib
else
SHARED_EXTENSION := so
endif

# this section adds the appropriate flags, headers, etc. for packages.
# See the Makefile.pkg for further information about how packages work.

INCDIRS  := $(foreach package,$(PACKAGES), $($(package)_INCLUDEDIRS)) $(INCDIRS)
CXXFLAGS := $(foreach package,$(PACKAGES), $($(package)_CXXFLAGS)) $(CXXFLAGS)
LDFLAGS  := $(foreach package,$(PACKAGES), $($(package)_LDFLAGS)) $(LDFLAGS)
LIBDIRS  := $(foreach package,$(PACKAGES), $($(package)_LIBDIRS)) $(LIBDIRS)
LIBNAMES := $(foreach package,$(PACKAGES), $($(package)_LIBNAME)) $(LIBNAMES)
LDLIBS_LAST += $(foreach package,$(PACKAGES), $($(package)_LDLIBS_LAST))
LDLIBS	 := $(foreach libs,$(LIBDIRS), -L$(libs)) $(foreach libs,$(LIBNAMES), -l$(libs)) $(LDLIBS)
DEFINES := $(foreach package,$(PACKAGES), $($(package)_DEFINES) ) $(DEFINES)

# because order is important
LDLIBS   += $(LDLIBS_LAST)

DEPEND_FILES += $(foreach pkg,$(PACKAGES), $($(pkg)_DEPENDS))
DEPEND_TARGETS += $(foreach pkg,$(PACKAGES), $($(pkg)_TARGETS))

ifeq ($(BUILD_SHARED_LIBS),yes)
.dependlibs: $(patsubst %.a,%.$(SHARED_EXTENSION),$(DEPEND_FILES))
else
.dependlibs: $(DEPEND_FILES)
endif
	touch .dependlibs

RELEASE = $(patsubst %/build,%/release, $(BUILD))
INCLUDE_LIST = $(foreach dir,$(INCDIRS),-I$(dir))
DEFINE_LIST = $(foreach dir,$(DEFINES),-D$(dir))
CXXFLAGS += $(INCLUDE_LIST) $(DEFINE_LIST)
CFLAGS += $(INCLUDE_LIST) $(DEFINE_LIST)

OBJ = obj.$(TARGET_NAME)
BIN = bin.$(TARGET_NAME)

.PHONY : all code clean default $(BIN) $(OBJ) prefs full verify fakepre 

SRC += $(SRC_$(OSCLASS))

TESTPROGRAMS += $(VERIFY_TESTCASES)

ALLSRC += $(TESTPROGRAMS) $(SRC)

OBJS = $(patsubst %.cpp,$(OBJ)/%.o,$(patsubst %.c,$(OBJ)/%.o,$(patsubst %.cxx,$(OBJ)/%.o,$(SRC)))) $(EXTRA_OBJS)
TESTPROGRAM_OBJS = $(patsubst %.cpp,$(OBJ)/%.o,$(patsubst %.c,$(OBJ)/%.o,$(patsubst %.cxx,$(OBJ)/%.o,$(TESTPROGRAMS)))) $(EXTRA_OBJS)
HWOBJS = $(patsubst %.cpp,$(OBJ)/%.o,$(patsubst %.c,$(OBJ)/%.o,$(patsubst %.cxx,$(OBJ)/%.o,$(HWSRC))))
DEPENDENCIES = $(patsubst %.cpp,$(OBJ)/%.d,$(patsubst %.c,$(OBJ)/%.d,$(patsubst %.cxx,$(OBJ)/%.d,$(ALLSRC))))

SHARED_LIB = $(patsubst %,$(OBJ)/%.$(SHARED_EXTENSION),$(strip $(TARGET_LIBRARY)))
STATIC_LIB = $(patsubst %,$(OBJ)/%.a,$(strip $(TARGET_LIBRARY)))

ifeq ($(BUILD_SHARED_LIBS),yes)
LIBTARGETS += $(SHARED_LIB)
else
LIBTARGETS += $(STATIC_LIB)
endif

EXTRAS = $(HWOBJS)

HEADERS =  $(wildcard *.h)  $(wildcard *.hxx)

CODETARGETS = $(patsubst %.cpp,$(BIN)/%,$(patsubst %.c,$(BIN)/%,$(patsubst %.cxx,$(BIN)/%,$(TESTPROGRAMS)))) \
              $(patsubst %,$(BIN)/%,$(TARGET_BINARY))

TESTCASE_PROGRAMS = $(patsubst %,$(BIN)/%,$(TESTCASES))
VERIFY_TESTCASE_PROGRAMS = $(patsubst %.c,$(BIN)/%,$(patsubst %.cxx,$(BIN)/%,$(VERIFY_TESTCASES)))

ifdef CROSS_COMPILE
	CROSS_FLAG = -c
endif

# here is the start of the appropriate rules

HEADERS_SPECIAL = 

DATESTAMP   =

code: $(HEADERS_SPECIAL) $(OBJ) $(HWOBJS) $(BIN) $(AUTO_FILES) $(TARGETS) $(LIBTARGETS) $(CODETARGETS) $(CODETARGETS_LT) $(COPY) $(TESTPROGRAM_OBJS)

# this rule does anything that needs to be done before dependency generation

$(BUILD)/fakepre: $(HEADERS_SPECIAL)
	@touch $(BUILD)/fakepre

#	$(TOOLS)/makeprefs $@
$(ROOT)/.make_prefs:
	echo 'USE_BUILDDIR=no' > $@

-include $(ROOT)/.make_prefs

prefs:
	$(TOOLS)/makeprefs $(ROOT)/.make_prefs

dependencies: $(DEPENDENCIES)

ifdef ROOT_TARGET
target:
	$(MAKE) -C $(ROOT) $(ROOT_TARGET)
endif

all: code 

clean:
	-rm -f *.rpo core core.* *~ \#* .make* *.a *.d *.S
	-rm -rf html
	-rm -f obj.*/*.rpo
	-rm -f obj.*/*.$(SHARED_EXTENSION) 
	-rm -f obj.*/*.[oda] 
	-rm -f obj.*/*/*.[oda] 
	-rm -f bin.*/*
	-rm -f bin.*/*/*
	for file in *; do test -h $$file && rm -f $$file; done ; true

cleanall: clean
	-rm -rf bin.* obj.*

distclean: cleanall
	-rm -rf *.db .dependlibs


$(BIN):
	-@ $(TOOLS)/mkbuildlinks $(BIN) $(ROOT)/.make_prefs
ifdef CODE_SUBDIRS
	-@ for subdir in $(CODE_SUBDIRS) ;  do ( mkdir -p $(BIN)/$$subdir ) ; done 
endif

$(OBJ):
	-@ $(TOOLS)/mkbuildlinks $(OBJ) $(ROOT)/.make_prefs

ifeq ($(CXXFLAGS),$(shell test -f $(OBJ)/cxxflags && cat $(OBJ)/cxxflags))
else
.PHONY: $(OBJ)/cxxflags
endif

ifeq ($(CFLAGS),$(shell test -f $(OBJ)/cflags && cat $(OBJ)/cflags))
else
.PHONY: $(OBJ)/cflags 
endif


$(OBJ)/cflags:
	@echo '$(CFLAGS)' > $@

$(OBJ)/cxxflags:
	@echo '$(CXXFLAGS)' > $@

ifeq ($(OSTYPE),cygwin)
OUTPUT_FLAG=-Fo
else
OUTPUT_FLAG=-o 
endif
# compile c code 
$(OBJ)/%.o: %.c $(OBJ)/%.d $(OBJ)/cflags
	$(CC) $(CFLAGS) -c $(OUTPUT_FLAG)$@ $<

ifeq ($(ACCEPT_I_FILES),1)
else
# compile c++ code
$(OBJ)/%.o: %.cxx $(OBJ)/%.d $(OBJ)/cxxflags
	$(CXX) $(CXXFLAGS) -c $(OUTPUT_FLAG)$@ $<
$(OBJ)/%.o: %.cpp $(OBJ)/%.d $(OBJ)/cxxflags
	$(CXX) $(CXXFLAGS) -c $(OUTPUT_FLAG)$@ $<
endif

# build executables
$(BIN)/%: $(OBJ)/%.o $(OBJS)  $(EXTRAS)  .dependlibs
	$(LINKER) $(LDFLAGS) -o $@ $(DATESTAMP) $(patsubst %.dependlibs,%, $^) $(LDLIBS)
	-@/bin/rm -f $(patsubst $(BIN)/%,%,$@) && ln -s $@ $(patsubst $(BIN)/%,%,$@)

# these rules build dependency files in the cases that need them.

ifeq ($(OSTYPE),cygwin)
$(OBJ)/%.d: %.c $(OBJ)
	echo > $@
$(OBJ)/%.d: %.cxx $(OBJ)
	echo > $@
$(OBJ)/%.d: %.cpp $(OBJ)
	echo > $@
else
$(OBJ)/%.d: %.c $(NOCOMPILE_SRC) $(ROOT)/.make_prefs
	-@ $(TOOLS)/mkbuildlinks $(OBJ) $(ROOT)/.make_prefs
ifdef CODE_SUBDIRS
	-@for subdir in $(CODE_SUBDIRS) ; do ( mkdir -p $(OBJ)/$$subdir ) ; done
endif
	@echo "Making $@"
	@$(SHELL) -ec '$(DEP) $(CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(DFLAGS) $< \
		$(DMANGLE) | sed -e "s#^$(*F).o[ :]*#$(@D)\/$(*F).o $@ : #" \
		> $@; [ -s $@ ] || rm -f $@'

$(OBJ)/%.d: %.cxx $(NOCOMPILE_SRC) $(ROOT)/.make_prefs
	-@ $(TOOLS)/mkbuildlinks $(OBJ) $(ROOT)/.make_prefs
ifdef CODE_SUBDIRS
	-@for subdir in $(CODE_SUBDIRS) ; do ( mkdir -p $(OBJ)/$$subdir ) ; done
endif
	@echo "Making $@"
	@$(SHELL) -ec '$(DEP) $(CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(DFLAGS) $< \
		$(DMANGLE) | sed -e "s#^$(*F).o[ :]*#$(@D)\/$(*F).o $@ : #" \
		> $@; [ -s $@ ] || rm -f $@'

$(OBJ)/%.d: %.cpp $(NOCOMPILE_SRC) $(ROOT)/.make_prefs
	-@ $(TOOLS)/mkbuildlinks $(OBJ) $(ROOT)/.make_prefs
ifdef CODE_SUBDIRS
	-@for subdir in $(CODE_SUBDIRS) ; do ( mkdir -p $(OBJ)/$$subdir ) ; done
endif
	@echo "Making $@"
	@$(SHELL) -ec '$(DEP) $(CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(DFLAGS) $< \
		$(DMANGLE) | sed -e "s#^$(*F).o[ :]*#$(@D)\/$(*F).o $@ : #" \
		> $@; [ -s $@ ] || rm -f $@'

endif

.SECONDARY: $(DEPENDENCIES) $(OBJS)

# this rule builds a target library if that is what is called for in
# the make file.  If not, the object files are not linked together.

ifdef TARGET_LIBRARY
$(OBJ)/$(strip $(TARGET_LIBRARY)).a: $(OBJS) $(OTHERLIBS)
	-@ test -f $@ && /bin/rm $@
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@
#	$(LINKER) $(LDFLAGS) -o dummy $@ $(DATESTAMP) $(patsubst %.dependlibs,%, $^) $(LDLIBS) $(OTHERLIBS)


$(OBJ)/$(strip $(TARGET_LIBRARY)).$(SHARED_EXTENSION): $(OBJS) $(OTHERLIBS)
	-@ test -f $@ && /bin/rm $@
	$(MKSHLIB) -o $@ $^
	-@ mkdir -p $(ROOT)/lib.$(TARGET_NAME)
	@ test -h $(ROOT)/lib.$(TARGET_NAME)/$(strip $(TARGET_LIBRARY)).$(SHARED_EXTENSION) || ln -s $(shell pwd)/$@ $(ROOT)/lib.$(TARGET_NAME)
endif

ifdef TARGET_BINARY
INSTALL_BINDIR := $(DESTDIR)$(INSTALL_PREFIX)/sbin
install: all
	$(INSTALL) -d $(DESTDIR)$(INSTALL_PREFIX)
	$(INSTALL) -d $(INSTALL_BINDIR)
	$(INSTALL) $(BIN)/$(TARGET_BINARY) $(INSTALL_BINDIR)/$(TARGET_BINARY)
else
ifdef TARGET_LIBRARY
INSTALL_LIBDIR := $(DESTDIR)$(INSTALL_PREFIX)/lib
INSTALL_INCDIR := $(DESTDIR)$(INSTALL_PREFIX)/include/$(subst lib,,$(TARGET_LIBRARY))

install: all
	$(INSTALL) -d $(DESTDIR)$(INSTALL_PREFIX)
	$(INSTALL) -d $(DESTDIR)$(INSTALL_PREFIX)/lib
	$(INSTALL) $(OBJ)/$(TARGET_LIBRARY).$(LIBSUFFIX) $(INSTALL_LIBDIR)/$(TARGET_LIBRARY).$(LIBSUFFIX)
	$(INSTALL) -d $(INSTALL_INCDIR)
	$(INSTALL) -m 644 *.h* $(INSTALL_INCDIR)
ifdef CODE_SUBDIRS
	@ for subdir in $(CODE_SUBDIRS) ;  do ( $(INSTALL) -d $(INSTALL_INCDIR)/$$subdir ; $(INSTALL) -m 644 $$subdir/*.h* $(INSTALL_INCDIR)/$$subdir) ; done 
endif
endif
endif

ifeq (,$(findstring clean,$(MAKECMDGOALS)))
  -include $(DEPENDENCIES)
endif

# If the make configuration isn't there, create a default one.
$(BUILD)/Makefile.conf:
	$(ROOT)/configure -y

# this MUST be the last item in the makefile -- it will be done first always.
-include $(BUILD)/fakepre

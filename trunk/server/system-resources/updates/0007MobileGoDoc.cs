'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 19 August 2010 at 11:15:09 am'!"Change Set:		MobileGoDocDate:			19 August 2010Author:			Howard StearnsForeign client proxy support for landmark links to docs, and going to docs."!!QForeignClientProxy methodsFor: 'commands' stamp: 'hrs 8/18/2010 16:13'!display: xmlNode	"Ensure that the specified doc is displayed at the panel that I'm at."	| name  |	name := xmlNode contentString.	participantUI startScript: #ensureDisplay: withArguments: {name}.! !!QForeignClientProxy methodsFor: 'commands' stamp: 'hrs 8/18/2010 15:04'!go: xmlNode	"Take avatar to the specified pseudo-place (e.g., a document), just as though the user had done so through an extended landmark link. Then (once we're there), request that the card be displayed (which may involve user interaction)."	| name  |	name := xmlNode contentString.	participantUI startScript: #goToPlaceName: withArguments: {name}.	participantUI startScript: #requestDisplay: withArguments: {name}.! !!QwaqParticipantUI methodsFor: 'logon-off' stamp: 'hrs 8/18/2010 14:59'!ensureDisplay: cardName	self stopScript: #ensureDisplay:.	self readyForEvents ifFalse: [^self statusAlert: 'Unable to display ', cardName].	avatar replica future ensureDisplay: cardName.! !!QwaqParticipantUI methodsFor: 'logon-off' stamp: 'hrs 8/18/2010 15:04'!requestDisplay: cardName	self stopScript: #requestDisplay:.	self readyForEvents ifFalse: [^self statusAlert: 'Unable to display ', cardName].	avatar replica future requestDisplay: cardName.! !!QAvatarReplica methodsFor: 'useful' stamp: 'hrs 8/18/2010 15:59'!ensureDisplay: cardName	"If I am at a drop target (e.g., a panel) that contains the specified file card (e.g., on 	a shelf), ensure it actualy displays the card and answer true. Otherwise false."	self nearbyDropTarget ifNotNilDo: [:target | 				target allFramesDo: [:frame |			(frame  isKindOf: QFileCard) ifTrue: [ | id | 				id := frame identifier.				(QWebServices match: cardName against: frame identifier caseSensitive: false) ifTrue: [					(target respondsTo: #displayCard:fromUser:) ifFalse: [						target := self root dropboxFor: self.						self takeMeToFrame: target.					].					target displayCard: frame fromUser: self.					^true				].			]		].	].	^false.! !!QAvatarReplica methodsFor: 'useful' stamp: 'hrs 8/18/2010 17:10'!requestDisplay: cardName	"True if I am at a drop target (e.g, a panel or poster) that is displaying the specified file card,	otherwise false, but signal #requestDisplay on myself so that listeners can decide whether to	ensureDisplay."	self nearbyDropTarget ifNil: [		self signal: #alertMessage with: 'Cannot find ', cardName.  "private listeners"	] ifNotNilDo: [:target | | card |		(target respondsTo: #card) ifTrue: [card := target card].  "posters"		(target respondsTo: #contentCard) ifTrue: [card := target contentCard].		card ifNotNil: [			(QWebServices match: cardName against: card identifier caseSensitive: false) 				ifTrue: [^true].  "we're done."		].		"Not displayed. Better ask the user before changing things.		(Consider, e.g., a mobile user who made this request before even entering, and didn't		know that there were people gathered around a different document at this location.)"		self signal: #requestDisplay with: cardName.	].	^false.! !!QAvatarReplica methodsFor: 'private' stamp: 'hrs 8/19/2010 11:11'!nearbyDropTarget	"Answer the display panel drop target that I am heuristically at, or nil.	Respects seating, workspaces that contain panels"	| place landmarks |	self avatarIAmWith ifNotNilDo: [:other | ^other nearbyDropTarget].	landmarks := self currentLandmarks.	place := self nearbyPlace: landmarks.	(place isNil or: [place label = #Standing]) ifTrue: [		^nil.		"place :=  landmarks detect: [  : p | p isNear: self ] ifNone: [ ^nil ]."	].	"Special case for when we're at a blank target (which won't be among landmarks, but	could have the same name as other stuff under root)"	place destinationFrame ifNotNil: [:f |		(f respondsTo: #displayCard:fromUser:) ifTrue: [^f]	].	"Find panels nested within workstations, under signs, etc."	^self root findDropTargetNamed: place label		landmarks: landmarks		avatar: self		within: 4! !!QForeignClientProxy methodsFor: 'commands' stamp: 'hrs 8/18/2010 16:15'!handleCommand: node "an XMLNode"	"Handles command datagrams received on the UI control stream."	[		activity ifNil: [self active].		^(node name) caseOf: {			['poke'] -> [self poke: node].			['typing'] -> [self typing: node].			['textChat'] -> [self textChat: node].			['goToPlace'] -> [self goToPlace: node].			['goToUser'] -> [self goToUser: node].			['goWithUser'] -> [self goWithUser: node].			['goNext'] -> [self goNext: node].			['goPrev'] -> [self goPrev: node].			['go'] -> [self go: node].			['display'] -> [self display: node].			['exit'] -> [self exit: node].			['save'] -> [self save: node].			['stopSessionCapture'] -> [self stopSessionCapture: node].			['jpgQuality'] -> [self jpgQuality: node].			['vote'] -> [self vote: node].			['cameraPanRelative'] -> [self cameraPanRelative: node].			['ping'] -> [self ping: node].			['listPlaces'] -> [self listPlaces: node].			['listUsers'] -> [self listUsers: node].			['listTextChat'] -> [self listTextChat: node].			['listStreams'] -> [self listStreams: node].			['describeStream'] -> [self describeStream: node].			['startSessionCapture'] -> [self startSessionCapture: node].			['jpg'] -> [self jpg: node].			['voiceStream'] -> [self voiceStream: node].			['panelOn'] -> [self panelOn: node].			['panelOff'] -> [self panelOff: node].		} otherwise: [ | msg |			msg := 'Unrecognized command: ', node.			QLogger logWarning: msg.			participantUI reportIncident: msg.		].	] on: Error do: [:err |		QLogger logError: 'error while handling command: ', String crlf, node.		QLogger logError: err.		^nil	].! !!QForeignClientProxy methodsFor: 'events' stamp: 'hrs 8/18/2010 16:11'!onMessageTrackingChanged	"We listen for message signals on many things. One of them has changed."	self resetMessageTracking. "kill 'em all."	self trackMessagesOn: participantUI.	self trackMessagesOn: participantUI activeSpace.	self trackMessagesOn: participantUI avatar.	self startScript: #onMessageTrackingChanged when: {participantUI. #avatarChanged}.	self startScript: #onMessageTrackingChanged when: {participantUI. #activeSpaceChanged}.		self startScript: #onRequestDisplay: when: {participantUI avatar replica. #requestDisplay}.! !!QForeignClientProxy methodsFor: 'events' stamp: 'hrs 8/18/2010 17:16'!onRequestDisplay: cardName	"Signalled on our avatarReplica when we have requested that cardName be displayed	and it is in the space, but not yet on a panel."	QLogger logInfo: 'Confirm display ', cardName.	self notifyClient: 'requestDisplay' xmlBlock: [:writer |		writer tag: #name value: cardName.	].	! !
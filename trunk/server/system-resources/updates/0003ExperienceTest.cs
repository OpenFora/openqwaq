'From Croquet1.0beta of 11 April 2006 [latest update: #1] on 22 June 2010 at 4:53:32 pm'!!QAudioSession methodsFor: 'private' stamp: 'jcg 6/22/2010 16:19'!privateResetSound	"Should only be called by QwaqParticipantUI>>privateResetSound:"		"Reset the core sound systems and audio handlers;	 this is called with all-islands locked to block render-pass events, 	 resource events, etc."	| restartMic bUnloadOpenAL |	self logResetSound: 'at the beginning...'.	self assertIsInTurn.		"Step -1 : Do some stuff that used to be in QwaqParticipantUI, but shouldn't be."	self useSoundEffects: false.	"Step 0 : turn off sound injection and sound receipt from others."	self logResetSound: 'Hiding voices.'.	voiceRelay ifNotNilDo: [:vr | 		vr speaker isValidFarRef ifTrue: [ 			vr speaker future unregisterResource.		]].	"Without this, when we try to unload OpenAL32.dll on Windows, it won't work.  For some reason that we don't understand, this must precede #destroyAllSpeakers below (otherwise, we'd just put in the block guarded by 'bUnloadOpenAL' below)."	speakerManager beMute.	[ speakerManager destroyAllSpeakers ] 		on: Error 		do: [ :ex| QLogger logWarning: 'Resetting speakers ? ', ex ].		"Just hangonasec man, let the world deal with all that."	ProcessorScheduler relinquishProcessorForMicroseconds: 5000.	bUnloadOpenAL := needsOpenALReset.	bUnloadOpenAL ifTrue: [		QLogger logWarning: 'Unloading OpenAL to accomodate changed device-list'.		needsOpenALReset := false.		QAudioSession primAudioPluginTickerStop.		self useOpenAL: false.		"Josh:  WTF?  It can't hurt to reset the codec, I guess, 		 but why only if we've unloaded OpenAL?"		microphone codec: nil.		"These dudes will crash if you use them post-rest-sound. 		 Better to have a primitive-failed error that we can catch."		QSpeexCodec allInstancesDo: [:codec | codec destroy].		QSoundTest allInstancesDo: [:test | test destroy].	].	"Step 1: Shutdown OpenAL"	"XXXXX: this is a bit weird... ideally, 	 this should be taken care of when we destroy/recreate the audio-interface below	(and maybe it is... I think that this step pre-dates the reification of the audio-interface."	OpenAL allSubInstancesDo:[:oal| oal destroy].	"Step 2: Shutdown Squeak sound"	SoundPlayer shutDown.	"Step 3: Pause all active SoundRecorders."	self logResetSound: 'Pausing sound recorders'.	restartMic := false.	[ 		microphone isActive ifTrue: [			microphone stopRecording.			restartMic := true 		] 	] on: Error do: [ : ex | QLogger logWarning: 'Microphone stop - ', ex ].	recorder beginResetSound.	noMixedSourcesRecorder beginResetSound.	"Step 4: Under some circumstances (see how we calculate 'bUnloadOpenAL' above) we seem to need to unload QAudioPlugin in order for OpenAL to detect changed input devices." 	bUnloadOpenAL ifTrue: [		| modules |		self logResetSound: 'About to unload QAudioPlugin'.		Smalltalk unloadModule: 'QAudioPlugin'.		(Delay forSeconds: 1) wait. "Give time to let QAudioPlugin finish up."				modules := Smalltalk listLoadedModules.		(modules anySatisfy: [:nm | nm beginsWith: 'QAudioPlugin']) ifTrue: [			"Uh-oh... unloading OpenAL will fail if QAudioPlugin is already reloaded."			| msg |			msg := 'QAudioPlugin was reloaded before attempt to unload OpenAL32.DLL'. 			self ui isSealedApplication 				ifTrue: [QLogger logWarning: msg]				ifFalse: [self ui reportIncident: msg].		].		Smalltalk unloadModule: 'OpenAL32.dll'.		OpenAL flushPrimitives.		"Now that we've unloaded QAudioPlugin, all audio-decoders have invalid		 handles (so the encoders, but we have sane ways to get at them."		QAudioDecoder allSubInstances do: [:qad | qad hackClearHandle].		" Unloading QAudioPlugin.dll also drops the log file so restore it "		QAudioSession setPluginLogFile:			(FileDirectory logDirectory fullNameFor: 'QAudioPlugin.log').		self logResetSound: 'Just reloaded QAudioPlugin'.	].	"- Just hangonasec man, let the world deal with all that."	ProcessorScheduler relinquishProcessorForMicroseconds: 5000.	bUnloadOpenAL ifTrue: [		QAudioSession primAudioPluginTickerSetInterval: 20.  "20 msecs"		QAudioSession primAudioPluginTickerStart.		"Josh:  WTF?  It can't hurt to reset the codec, 		 I guess, but why only if we've unloaded OpenAL?"		microphone codec: QSpeexCodec new.  	].	"If we muted ourself above, undo it."	isMute ifFalse: [speakerManager beUnmute].	"Step 5: Recreate the audio interface"	self logResetSound: 'Resetting audio interface'.	self openALDevice: ui preferences audioPlayer.	"We can probably always just do the true branch, but that's not what the original	more-well-tested code was doing."	bUnloadOpenAL		ifTrue: [			self useOpenAL: ui preferences useOpenAL.			QClientSpeakerExternalOutput useJitterbuffer: true.  "re-enable"		]		ifFalse: [self resetAudioInterface].	"Step 6: Resume recording"	restartMic ifTrue: [ 		self logResetSound: 'Restarting recorder'.		microphone startRecording ].	recorder endResetSound.	noMixedSourcesRecorder endResetSound.	"Step 7: re-establish voice chat speaker stream."	self logResetSound: 'Resuming voice stream'.	voiceRelay ifNotNilDo: [:vr | 		vr speaker isValidFarRef ifTrue: [ 			vr speaker future unregisterResource.			vr speaker future registerResource.		]].	"Step 8: re-enable sound-effects"	self useSoundEffects: ui preferences doSoundEffects.! !!QSoundTest methodsFor: 'processing' stamp: 'jcg 6/22/2010 16:06'!processOriginalSegmentsUsing: selector	| targetElapsed elapsed finished errorOccurred|	targetElapsed := 0.	startTime := self currentTime.	errorOccurred := false.	finished := Semaphore new.	[		[1 to: numberOfSegments do: [:segmentIndex |			self				perform: selector				with: (originalSegments at: segmentIndex)				with: segmentIndex.			elapsed := self elapsedTime.			targetElapsed := targetElapsed + 80.			elapsed < targetElapsed ifTrue: [(Delay forMilliseconds: (targetElapsed - elapsed)) wait]]		] on: Error do: [:err | 			errorOccurred := true.			QLogger logError: err		].		finished signal	] forkAt: Processor highIOPriority.	finished wait.	errorOccurred ifTrue: [self error: 'error occurred in #processOriginalSegmentsUsing:'].! !!QwaqParticipantUI methodsFor: 'menu' stamp: 'jcg 6/22/2010 16:47'!testClientExperience	"Send the test signal, speex-encoded, to the media router, receive it, and ensure that the end-to-end content, maximum latency, and maximum jitter are appropriate."	| test testSummary testDetails dialog sendDetails playOriginalTestSignal playReceivedTestSignal pasteDetails infoMessageDelay notifying |	test := (		(QSoundTest forSeconds: 5)			controller: self session mediaController;			yourself).	QActivityCapture action: #TestAudioPipelineExtrasMenu.	infoMessageDelay := Delay forSeconds: 1.	notifying := true.	[	[notifying] whileTrue: [			self signal: #infoMessage with: 'Testing end-to-end voice audio pipeline...'.			infoMessageDelay wait]	] fork.	[	[test testDecoding.		 testSummary := test summary.		 testDetails := test detailsFor: self]			on: TestFailure, Error			do: [:exception |				"Ignore assertion failures."				exception isResumable					ifTrue: [exception resume]					ifFalse: [						QLogger logError: exception.						^CDialog inform: 'Error occurred during client-experience test']]	] ensure: 		[notifying := false.		 test destroy].	dialog := (		(CUserDialog new)			label: 'Client Experience Test Results';			message: testSummary;			yourself).	(dialog messageText)		allowEditing: false;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	sendDetails := (		(dialog addButton: 'Report to Teleplace')			width: 150;			yourself).	self		startScript: [			self				mailTo: 'support@teleplace.com'				subject: 'client experience report'				body: testDetails]		when: {sendDetails. #fire}.	pasteDetails := (		(dialog addButton: 'Paste to Text Chat')			width: 150;			yourself).	self		startScript: [			self activeSpace future chatLog future				addMessage: testDetails				fromUser: (self activeSpace future chatLog future userForAvatar: self avatar replica)				atTime: QChatLog clientUtcTime]		when: {pasteDetails. #fire}.	playOriginalTestSignal := (		(dialog addButton: 'Play Original')			width: 150;			yourself).	self		startScript: [test playOriginalSound]		when: {playOriginalTestSignal. #fire}.	playReceivedTestSignal := (		(dialog addButton: 'Play Received')			width: 150;			yourself).	self		startScript: [test playDecodedSound]		when: {playReceivedTestSignal. #fire}.	dialog addButton: 'Dismiss' value: #cancel.	dialog run: nil centerAt: self bounds center! !!QwaqParticipantUI methodsFor: 'sound' stamp: 'jcg 6/22/2010 16:46'!privateRunGroupClientExperienceTest: reasonString	| test notifying testDetails |	QLogger logWarning: 'Running group client experience test (reason: ', reasonString, ')'.	mobileProxy ifNotNil: [ "Now, before we bog the proxy down."		mobileProxy startScript: #requestClientExperience.  "Reports to text chat asyncronously on its own."			[			(Delay forSeconds: 5) wait.  "for a response"			self profileToChat: 15.		] forkAt: Processor userBackgroundPriority. 		^self   "Sound test is too unreliable on proxy. Why?"	].	test := QSoundTest forSeconds: 5.	test controller: self session mediaController.	"As long as the test is still going, keep informing the user."	notifying := true.	[ [notifying] whileTrue: [			self signal: #infoMessage with: 'Running group client experience test...'.			(Delay forSeconds: 1) wait]	] fork.	[	[test testDecoding.		 testDetails := test detailsFor: self] 			on: TestFailure, Error 			do: [:ex |				ex isResumable					ifTrue: [ex resume "Ignore assertion failures."]					ifFalse:						[QLogger logError: ex.						testDetails := 'Error during client experience test: ', ex messageText]].	] ensure:		[notifying := false.		 test destroy].	self startScript: [		self activeSpace future chatLog future			addMessage: testDetails			fromUser: (self activeSpace future chatLog future userForAvatar: self avatar replica)			atTime: QChatLog clientUtcTime].	self statusInfo: 'Ran group client experience test.'! !
'From Croquet1.0beta of 11 April 2006 [latest update: #1] on 16 January 2007 at 1:18:25 pm'!"Change Set:		CallbacksDate:			16 January 2007Author:			Andreas RaabUpdated: Make sure we preserve newMethod in callbacks to ensure that the calling primitive can fail and continue execution of the right method.This changes provides MINIMAL callback support. It exposes and implements an interface that is barely enough to write a callback interface on top of it. See ExampleCallbackPlugin for an example of use."!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext localReturnContext localReturnValue messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex primitiveFunctionPointer methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignalA semaphoresUseBufferA semaphoresToSignalCountA semaphoresToSignalB semaphoresToSignalCountB processSignalingLowSpace savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory newNativeMethod methodClass receiverClass interpreterVersion obsoleteIndexedPrimitiveTable obsoleteNamedPrimitiveTable interpreterProxy showSurfaceFn interruptCheckCounterFeedBackReset interruptChecksEveryNms externalPrimitiveTable primitiveTable globalSessionID suspendedMethods jmpDepth jmpMax jmpBuf suspendedCallbacks '	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BlockMethodIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize CrossedX DirBadPath DirEntryFound DirNoMoreEntries EndOfRun ExcessSignalsIndex FirstLinkIndex HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex JitterTable LastLinkIndex LiteralStart MaxExternalPrimitiveTableSize MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCacheNative MethodCachePrim MethodCachePrimFunction MethodCacheSelector MethodCacheSize MethodIndex MillisecondClockMask MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex MaxJumpBuf '	poolDictionaries: ''	category: 'VMMaker-Interpreter'!!Interpreter methodsFor: 'image save/restore' stamp: 'ar 9/29/2006 18:59'!dumpImage: fileName	"Dump the entire image out to the given file. Intended for debugging only."	| f dataSize result |	self export: true. "don't optimize it away"	self var: #f type: 'sqImageFile'.	f := self cCode: 'sqImageFileOpen(fileName, "wb")'.	f = nil ifTrue: [^-1].	dataSize := endOfMemory - self startOfMemory.	result := self cCode: 'sqImageFileWrite(pointerForOop(memory), sizeof(unsigned char), dataSize, f)'.	self cCode: 'sqImageFileClose(f)'.	^result! !!Interpreter methodsFor: 'initialization' stamp: 'ar 6/8/2006 11:40'!initializeInterpreter: bytesToShift 	"Initialize Interpreter state before starting execution of a new image."	interpreterProxy := self sqGetInterpreterProxy.	self dummyReferToProxy.	self initializeObjectMemory: bytesToShift.	self initCompilerHooks.	activeContext := nilObj.	theHomeContext := nilObj.	method := nilObj.	receiver := nilObj.	messageSelector := nilObj.	newMethod := nilObj.	methodClass := nilObj.	lkupClass := nilObj.	receiverClass := nilObj.	newNativeMethod := nilObj.	self flushMethodCache.	self loadInitialContext.	self initialCleanup.	interruptCheckCounter := 0.	interruptCheckCounterFeedBackReset := 1000.	interruptChecksEveryNms := 1.	nextPollTick := 0.	nextWakeupTick := 0.	lastTick := 0.	interruptKeycode := 2094. "cmd-. as used for Mac but no other OS"	interruptPending := false.	semaphoresUseBufferA := true.	semaphoresToSignalCountA := 0.	semaphoresToSignalCountB := 0.	deferDisplayUpdates := false.	pendingFinalizationSignals := 0.	globalSessionID := 0.	[globalSessionID = 0]		whileTrue: [globalSessionID := self						cCode: 'time(NULL) + ioMSecs()'						inSmalltalk: [(Random new next * SmallInteger maxVal) asInteger]].	jmpDepth := 0.	jmpMax := MaxJumpBuf. "xxxx: Must match the definition of jmpBuf and suspendedCallbacks"! !!Interpreter methodsFor: 'primitive support' stamp: 'ar 6/8/2006 11:13'!primitiveResponse	"NB: tpr removed the timer checks here and moved them to the primitiveExternalCall method.	We make the possibly unwarranted assumption that numbered prims are quick and external prims are slow."	| delta primIdx nArgs |	DoBalanceChecks ifTrue:["check stack balance"		nArgs := argumentCount.		delta := stackPointer - activeContext.	].	primIdx := primitiveIndex.	successFlag := true.	"self dispatchOn: primitiveIndex in: primitiveTable."	self dispatchFunctionPointerOn: primIdx in: primitiveTable.	"replace with fetch entry primitiveIndex from table and branch there"	DoBalanceChecks ifTrue:[		(self balancedStack: delta afterPrimitive: primIdx withArgs: nArgs) 			ifFalse:[self printUnbalancedStack: primIdx].	].	primitiveIndex := 0. "clear out primIndex so VM knows we're no longer in primitive"	^ successFlag! !!Interpreter methodsFor: 'interpreter shell' stamp: 'ar 6/8/2006 13:42'!interpret	"This is the main interpreter loop. It normally loops forever, fetching and executing bytecodes. When running in the context of a browser plugin VM, however, it must return control to the browser periodically. This should done only when the state of the currently running Squeak thread is safely stored in the object heap. Since this is the case at the moment that a check for interrupts is performed, that is when we return to the browser if it is time to do so. Interrupt checks happen quite frequently."	"record entry time when running as a browser plug-in"	self browserPluginInitialiseIfNeeded.	self internalizeIPandSP.	self fetchNextBytecode.	[true] whileTrue: [self dispatchOn: currentBytecode in: BytecodeTable].	localIP := localIP - 1.  "undo the pre-increment of IP before returning"	self externalizeIPandSP.! !!Interpreter methodsFor: 'object memory support' stamp: 'ar 1/16/2007 10:48'!mapInterpreterOops	"Map all oops in the interpreter's state to their new values 	during garbage collection or a become: operation."	"Assume: All traced variables contain valid oops."	| oop |	nilObj := self remap: nilObj.	falseObj := self remap: falseObj.	trueObj := self remap: trueObj.	specialObjectsOop := self remap: specialObjectsOop.	compilerInitialized		ifFalse: [stackPointer := stackPointer - activeContext. "*rel to active"			activeContext := self remap: activeContext.			stackPointer := stackPointer + activeContext. "*rel to active"			theHomeContext := self remap: theHomeContext].	instructionPointer := instructionPointer - method. "*rel to method"	method := self remap: method.	instructionPointer := instructionPointer + method. "*rel to method"	receiver := self remap: receiver.	messageSelector := self remap: messageSelector.	newMethod := self remap: newMethod.	methodClass := self remap: methodClass.	lkupClass := self remap: lkupClass.	receiverClass := self remap: receiverClass.	1 to: remapBufferCount do: [:i | 			oop := remapBuffer at: i.			(self isIntegerObject: oop)				ifFalse: [remapBuffer at: i put: (self remap: oop)]].	"Callback support - trace suspended callback list"	1 to: jmpDepth do:[:i|		oop := suspendedCallbacks at: i.		(self isIntegerObject: oop) 			ifFalse:[suspendedCallbacks at: i put: (self remap: oop)].		oop := suspendedMethods at: i.		(self isIntegerObject: oop) 			ifFalse:[suspendedMethods at: i put: (self remap: oop)].	].! !!Interpreter methodsFor: 'object memory support' stamp: 'ar 1/16/2007 10:47'!markAndTraceInterpreterOops	"Mark and trace all oops in the interpreter's state."	"Assume: All traced variables contain valid oops."	| oop |	self compilerMarkHook.	self markAndTrace: specialObjectsOop. "also covers nilObj, trueObj, falseObj, and compact classes"	compilerInitialized		ifTrue: [self markAndTrace: receiver.			self markAndTrace: method]		ifFalse: [self markAndTrace: activeContext].	self markAndTrace: messageSelector.	self markAndTrace: newMethod.	self markAndTrace: methodClass.	self markAndTrace: lkupClass.	self markAndTrace: receiverClass.	1 to: remapBufferCount do: [:i | 			oop := remapBuffer at: i.			(self isIntegerObject: oop) ifFalse: [self markAndTrace: oop]].	"Callback support - trace suspended callback list"	1 to: jmpDepth do:[:i|		oop := suspendedCallbacks at: i.		(self isIntegerObject: oop) ifFalse:[self markAndTrace: oop].		oop := suspendedMethods at: i.		(self isIntegerObject: oop) ifFalse:[self markAndTrace: oop].	].! !!Interpreter methodsFor: 'callback support' stamp: 'ar 1/16/2007 11:47'!callbackEnter: callbackID	"Re-enter the interpreter for executing a callback"	| result activeProc |	self export: true.	self var: #callbackID declareC: 'sqInt *callbackID'.	"For now, do not allow a callback unless we're in a primitiveResponse"	primitiveIndex = 0 ifTrue:[^false].	"Check if we've exceeded the callback depth"	jmpDepth >= jmpMax ifTrue:[^false].	jmpDepth := jmpDepth + 1.	"Suspend the currently active process"	activeProc := self fetchPointer: ActiveProcessIndex						 ofObject: self schedulerPointer.	suspendedCallbacks at: jmpDepth put: activeProc.	"We need to preserve newMethod explicitly since it is not activated yet	and therefore no context has been created for it. If the caller primitive	for any reason decides to fail we need to make sure we execute the correct	method and not the one 'last used' in the call back"	suspendedMethods at: jmpDepth put: newMethod.	self transferTo: self wakeHighestPriority.	"Typically, invoking the callback means that some semaphore has been 	signaled to indicate the callback. Force an interrupt check right away."	self forceInterruptCheck.	result := self setjmp: (jmpBuf at: jmpDepth).	result == 0 ifTrue:["Fill in callbackID"		callbackID at: 0 put: jmpDepth.		"This is ugly but the inliner treats interpret() in very special and strange ways and calling any kind of 'self interpret' either directly or even via cCode:inSmalltalk: will cause this entire method to vanish."		self cCode: 'interpret()'.	].	"Transfer back to the previous process so that caller can push result"	activeProc := self fetchPointer: ActiveProcessIndex						 ofObject: self schedulerPointer.	self putToSleep: activeProc.	activeProc := suspendedCallbacks at: jmpDepth.	newMethod := suspendedMethods at: jmpDepth.	"see comment above"	self transferTo: activeProc.	jmpDepth := jmpDepth-1.	^true! !!Interpreter methodsFor: 'callback support' stamp: 'ar 8/30/2006 11:26'!callbackLeave: cbID	"Leave from a previous callback"	self export: true.	"For now, do not allow a callback unless we're in a primitiveResponse"	primitiveIndex = 0 ifTrue:[^false].	"Check if this is the top-level callback"	cbID = jmpDepth ifFalse:[^false].	cbID < 1 ifTrue:[^false].	"This is ugly but necessary, or otherwise the Mac will not build"	self long: (jmpBuf at: jmpDepth) jmp: 1.! !!Interpreter class methodsFor: 'translation' stamp: 'ar 1/16/2007 10:53'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator addHeaderFile:'<setjmp.h>'.	aCCodeGenerator 		var: #interpreterProxy 		type: #'struct VirtualMachine*'.	aCCodeGenerator		var: #primitiveTable		declareC: 'void *primitiveTable[', (MaxPrimitiveIndex +2) printString, '] = ',	self primitiveTableString.	aCCodeGenerator		var: #primitiveFunctionPointer		declareC: 'void *primitiveFunctionPointer'				.		"xxxx FIX THIS STUPIDITY xxxx - ikp. What he means is use a better type than void *, apparently - tpr"	aCCodeGenerator		var: #methodCache		declareC: 'long methodCache[', (MethodCacheSize + 1) printString, ']'.	aCCodeGenerator		var: #atCache		declareC: 'sqInt atCache[', (AtCacheTotalSize + 1) printString, ']'.	aCCodeGenerator var: #localIP type: #'char*'.	aCCodeGenerator var: #localSP type: #'char*'.	aCCodeGenerator var: #showSurfaceFn type: #'void*'.	aCCodeGenerator var: 'semaphoresToSignalA'		declareC: 'sqInt semaphoresToSignalA[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator var: 'semaphoresToSignalB'		declareC: 'sqInt semaphoresToSignalB[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator		var: #compilerHooks		declareC: 'sqInt (*compilerHooks[', (CompilerHooksSize + 1) printString, '])()'.	aCCodeGenerator		var: #interpreterVersion		declareC: 'const char *interpreterVersion = "', SmalltalkImage current datedVersion, ' [', SmalltalkImage current lastUpdateString,']"'.	aCCodeGenerator		var: #obsoleteIndexedPrimitiveTable		declareC: 'char* obsoleteIndexedPrimitiveTable[][3] = ', self obsoleteIndexedPrimitiveTableString.	aCCodeGenerator		var: #obsoleteNamedPrimitiveTable		declareC: 'const char* obsoleteNamedPrimitiveTable[][3] = ', self obsoleteNamedPrimitiveTableString.	aCCodeGenerator		var: #externalPrimitiveTable		declareC: 'void *externalPrimitiveTable[', (MaxExternalPrimitiveTableSize + 1) printString, ']'.	aCCodeGenerator		var: #jmpBuf		declareC: 'jmp_buf jmpBuf[', (MaxJumpBuf + 1) printString, ']'.	aCCodeGenerator		var: #suspendedCallbacks		declareC: 'sqInt suspendedCallbacks[', (MaxJumpBuf + 1) printString, ']'.	aCCodeGenerator		var: #suspendedMethods		declareC: 'sqInt suspendedMethods[', (MaxJumpBuf + 1) printString, ']'.! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 6/8/2006 11:40'!initialize	"Interpreter initialize"	super initialize.  "initialize ObjectMemory constants"	self initializeAssociationIndex.	self initializeBytecodeTable.	self initializeCaches.	self initializeCharacterIndex.	self initializeCharacterScannerIndices.	self initializeClassIndices.	self initializeCompilerHooks.	self initializeContextIndices.	self initializeDirectoryLookupResultCodes.	self initializeMessageIndices.	self initializeMethodIndices.	self initializePointIndices.	self initializePrimitiveTable.	self initializeSchedulerIndices.	self initializeSmallIntegers.	self initializeStreamIndices.	SemaphoresToSignalSize := 500.	PrimitiveExternalCallIndex := 117. "Primitive index for #primitiveExternalCall"	MillisecondClockMask := 16r1FFFFFFF.	"Note: The external primitive table should actually be dynamically sized but for the sake of inferior platforms (e.g., Mac :-) who cannot allocate memory in any reasonable way, we keep it static (and cross our fingers...)"	MaxExternalPrimitiveTableSize := 4096. "entries"	MaxJumpBuf := 32. "max. callback depth"! !Interpreter initialize!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext localReturnContext localReturnValue messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex primitiveFunctionPointer methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignalA semaphoresUseBufferA semaphoresToSignalCountA semaphoresToSignalB semaphoresToSignalCountB processSignalingLowSpace savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory newNativeMethod methodClass receiverClass interpreterVersion obsoleteIndexedPrimitiveTable obsoleteNamedPrimitiveTable interpreterProxy showSurfaceFn interruptCheckCounterFeedBackReset interruptChecksEveryNms externalPrimitiveTable primitiveTable globalSessionID jmpBuf jmpDepth jmpMax suspendedCallbacks suspendedMethods'	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BlockMethodIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize CrossedX DirBadPath DirEntryFound DirNoMoreEntries EndOfRun ExcessSignalsIndex FirstLinkIndex HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex JitterTable LastLinkIndex LiteralStart MaxExternalPrimitiveTableSize MaxJumpBuf MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCacheNative MethodCachePrim MethodCachePrimFunction MethodCacheSelector MethodCacheSize MethodIndex MillisecondClockMask MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex'	poolDictionaries: ''	category: 'VMMaker-Interpreter'!
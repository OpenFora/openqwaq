'From Croquet1.0beta of 11 April 2006 [latest update: #1] on 22 October 2009 at 11:25:27 am'!!QChatPane methodsFor: 'initialize' stamp: 'das 10/22/2009 10:55'!restoreState: stateToRestore	"Tool layout services."	owner hasChat ifFalse:[^ self].	super restoreState: stateToRestore.	self isOpen ifTrue: [		"The restore-state path doesn't kick onExpandedChanged since	       it starts out that way; we do this to get the message list autoload."		self onExpandedChanged.	].! !!QTextingDialog methodsFor: 'events' stamp: 'das 10/16/2009 10:14'!sendText	"Send the text to the other user."	| msg e |	owner orgServices ifNil: [ ^ self ].	owner hasPrivateChat ifFalse:[ ^ self ].	e := owner usersPane entryForLogin: otherUser.	( e isNil or: [ e isLoggedIn not ] ) ifTrue: [		self startScript: #inform: 			withArguments: {'', otherUserName, ' appears to have logged out.'}.	].	msg := responseText contents asString withBlanksTrimmed.	msg ifEmpty: [ ^ self ].	owner orgServices ifNotNilDo: [ :os|		os sendSignal: #textMessage1to1:arguments:			forUser: (otherUser)			argument: {owner preferences publicName . msg }	].	self addMessage: msg fromMe: true.	responseText contents: ''.	! !!QUsersPane methodsFor: 'extras' stamp: 'das 10/16/2009 10:15'!userMenu: aUserEntry withTitle: aBool	"The CMenu with actions for the given user entry."	| menu title isPresent hereWithMe isFave isLogged item isMe isInAForum iAmLive canControl canMove |	menu := CMenu new.	aBool ifTrue: [		title := aUserEntry ifNil: [ 'People...' ] ifNotNil: [ aUserEntry publicName ].		item := (menu add: title target: self action: #notImplemented).		item disabled: true; separator: true.		item costume 			  	disabledTextColor: (					aUserEntry ifNil: [ Color gray ] ifNotNil: [ aUserEntry textColor lighter ]).	].	iAmLive := (owner readyForEvents).	isMe := aUserEntry notNil and: [ aUserEntry isMe ].	isPresent := aUserEntry notNil and: [ aUserEntry isPresent ].	isFave := aUserEntry notNil and: [ aUserEntry isFavorite ].	isLogged := aUserEntry notNil and: [ aUserEntry isLoggedIn ].	isInAForum := aUserEntry notNil and: [ aUserEntry currentForum notNil ].	hereWithMe := isPresent & (isMe not).	canControl := iAmLive and: [ hereWithMe ] and: [ isMe not ] and: [ owner isMeetingLeader ].		canMove := owner allowedToMove.	canControl ifTrue: [		"Leader commands to others."		owner meetingState audienceIsMuted ifTrue: [			(menu add: (aUserEntry canSpeakInMeeting ifTrue: [ 'Mute' ] ifFalse: [ 'Un-Mute' ])			   target: self			   action: #toggleEntryMute:			   argument: aUserEntry)			separator: true].		menu add: 'Reset Sound' 			   target: self 			   action: #sendResetSound:			   argument: aUserEntry.		aUserEntry isMicOff ifFalse: [			menu add: 'Turn Off Voice'			   target: self			   action: #sendStopMicrophone:			   argument: aUserEntry		].		menu menuItems last separator: true.	] ifFalse: [		"Click my meeting leader?"		(isPresent and: [ isMe not ]		and: [  aUserEntry isMeetingLeader ] and: [ self myEntry wantsToSpeak not ])		ifTrue: [			(menu add: 'Request to Speak' 				   target: (owner controlBar askToSpeak)				   action: #selected:				   argument: true)				separator: true			].	].	"Regular inter-user basics."	(isInAForum & (isMe not) & canMove) ifTrue: [		menu add: 'Go To' target: self action: #menuGoToUser: argument: aUserEntry  ].	(iAmLive & hereWithMe & canMove) ifTrue: [		(menu add: 'Go With' target: self action: #goBeside: argument: aUserEntry)			enabled: canMove.		(menu add: 'Turn To' target: self action: #turnTo: argument: aUserEntry)			enabled: canMove;			separator: true ].	owner hasPrivateChat ifTrue:[		(isLogged & (isMe not) and: [ self canTextUser: aUserEntry ]) ifTrue: [			menu menuItems size > 0 ifTrue:[ menu menuItems last separator: true ].			(menu add: 'Private Text...' target: self action: #privateText: argument: aUserEntry)				separator: true.			].	].	aUserEntry ifNotNil: [		menu menuItems size > 0 ifTrue:[ menu menuItems last separator: true ].		(menu add: 'Favorite (*)' target: self action: #toggleFavorite: argument: aUserEntry)			checked: isFave.		"Allow creation of a webcam file card if the user is publishing a stream here."			(iAmLive and: [owner canModifyForum] 	  	 and: [ aUserEntry hasVideoStream ]) 	 	 ifTrue: [			menu add: 'Get Webcam Link...'				   target: self 				   action: #makeWebcamLink: 				   argument: aUserEntry			]].	iAmLive ifFalse: [ ^ menu ].	"--- The remainder only applies when I'm fully in-forum."	"If the user has declared itself a robot (which currently can only be done	 from the developer menu), then offer its mode controls."	(aUserEntry notNil and: [aUserEntry isRobot]) ifTrue: [		menu menuItems last separator: true.		QDemon modes do: [ : sym |			(menu add: 'Be ', sym capitalized, ' Demon' 				    target: self 				    action: #robotControl:symbol: 				    arguments: {aUserEntry . sym })					checked: (aUserEntry robotMode = sym).		].		menu menuItems last separator: true.		QDemon verbs do: [ :pair|			(menu add: pair first				    target: QDemon				    action: pair second				    arguments: { aUserEntry sessionID . owner }).		]	].	^ menu! !!QUsersPane methodsFor: 'invitations' stamp: 'das 10/22/2009 10:15'!privateChatDialog: user	| dlog |	owner hasPrivateChat ifFalse:[ ^self ]. "private text chat suppressed"	dlog := privateChats 		at: (user userLogin)		ifAbsentPut: [QTextingDialog 						forFirstTo:  (user userLogin)  						name: (user publicName)  						inOwner: owner].	dlog costume.	(dlog container isNil or: [ dlog visible not]) ifTrue:[		dlog visible: true;			 extent: (QTextingDialog defaultExtent);			 expand;			 openAt: (10@(owner height-400)) in: owner.	] ifFalse: [		dlog expand; comeToFront.	].	^ dlog! !!QUsersPane methodsFor: 'invitations' stamp: 'das 10/16/2009 10:14'!privateText: user	"Open a private text dialog to start an exchange with the selected user."	user ifNil: [^ self ].	owner orgServices ifNil: [ ^ self ].	owner hasPrivateChat ifFalse:[ ^self ]. "private text chat suppressed"	QActivityCapture action: #PrivateChatUserMenu.	(self canTextUser: user) ifFalse: [		^ self inform: 'At the moment, ', (user publicName), (String cr),					'is not accepting private messages.'	].	"Since I'm asking for this deliberately, I know I want to type."	(self privateChatDialog: user) ifNotNilDo: [ : dlog |		dlog takeKeyboardFocus	].! !!QwaqParticipantUI methodsFor: 'menu' stamp: 'das 10/16/2009 10:18'!repopulateToolsMenu: menu	| item |	menu removeMenuItems.	"--- Principal tools first ---"	item := menu add: 'All Teleplaces...' target: servicesPane action: #toggle.	self linkItem: item toTool: servicesPane.	item := menu add: 'Documents...' target: documentsPane action: #toggle.	self linkItem: item toTool: documentsPane.	self hasPhoneSupport ifTrue: [		item := menu add: 'Phone...' target: phonePane action: #toggle.		self linkItem: item toTool: phonePane.	].	self hasChat ifTrue:[		item := menu add: 'Text Chat...' target: chatPane action: #toggle.		self linkItem: item toTool: chatPane.	].	item := menu add: 'Webcams...' target: webcamPane action: #toggle.	self linkItem: item toTool: webcamPane. 	self hasExperimentalFeatures ifTrue: [		item := (			menu				add: 'Crowd...'				target: crowdPane				action: #toggle).			self linkItem: item toTool: crowdPane].	"--- Middle group  for more technical tools ---"	menu addSeparator.	item := menu add: 'Network Activity...' target: trafficPane action: #toggle.	self linkItem: item toTool: trafficPane.	item := menu add: 'Performance...' target: statisticsPane action: #toggle.	self linkItem: item toTool: statisticsPane.	item := menu add: 'Scene Inspector...' target: treeInspector action: #toggle.	self linkItem: item toTool: treeInspector.	item enabled: (self canModifyForum).	item := menu add: 'Transcript...' target: logView action: #toggle.	self linkItem: item toTool: logView.	"-- Administration - user permissions ---"	menu addSeparator.	self hasExperimentalFeatures ifTrue: [		"This started out as a tool used if hasQrlSupport, but now it's just internal machinery		with no reason for users to see it. We might rip it out (and put the functionality elsewhere)		or we might shuffle things around such that it becomes relevant to users again. We'll see."		item := menu add: 'External Uploads...' target: customsPane action: #toggle.		self linkItem: item toTool: customsPane.	].	(menu add: 'Manage Users...' target: usersPane action: #editForumPermissions)		tag: #addRemoveUsers;		enabled: (self isAdministrator).	"--- Tail group for personal settings ---"	menu addSeparator.	item := menu add: 'My Avatar...' target: avatarPane action: #toggle.	self linkItem: item toTool: avatarPane.	menu add: 'Preferences...' target: self action: #showPreferences.	"Preferences is a dialog rather than a float, so it is not linked."	menu add: 'Sound...' target: controlBar action: #adjustSound.	QStyles installMenuFontInMenu: menu.	^menu! !!QwaqParticipantUI methodsFor: 'roles&capabilities' stamp: 'das 10/22/2009 10:59'!hasChat	"A switchable feature 'ChatSuppressed - if true,	 the chat dialogs are turned off. "	^ (self hasFeatureEntitlement: #PublicChat).! !!QwaqParticipantUI methodsFor: 'roles&capabilities' stamp: 'das 10/22/2009 10:56'!hasPrivateChat	"A switchable feature 'PrivateChatSuppressed - if true,	 the private chat dialogs are turned off. "	^ (self hasFeatureEntitlement: #PrivateChat)	! !!QwaqParticipantUI class methodsFor: 'roles&capabilities' stamp: 'das 10/22/2009 11:06'!allFeatureKeys	"This is for documentation and development-time consistency checking	 All the EnabledFeatures keys for which we have implementation in the client."	^ #(			AnyUserCanInvite		"Members can invite members (not just admins)"			DesktopEdition			"Can see and enter miramar spaces"			InviteByRole				"Invitation dialog offers guest/member/admin choice"			OfflineUploads			"Can files be uploaded without entering, and later retrieved."			PersonalShare			"Create Miramar-style personal-shares by importing documents."			PersonalShareInput		"In-space input to personal share"			PersonalShareVNC		"Connect-to-VNC"			PersonalShareColorKey	"Color keying in personal share"			Phone					"Telephone call in/out stuff"			QRL						"Forum Pages corresponding to forums. NOT QRLs for entry."			WebCam					"Web cameras - which have license/royalty constraints."			SessionBroadcast			"Can broadcast (i.e. stream video+audio)."			SessionRecording		"Can record sessions inside forums"			PublicChat				"If this is false, chat panes and associated menus are unavailable"			PrivateChat				"If this is false, private chat is unavailable"		)! !